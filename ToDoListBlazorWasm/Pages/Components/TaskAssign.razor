@using ToDoListBlazorWasm.Services
@using TodoList.Models
@using TodoList.Models.Dtos
@inject ITaskApiClient TaskApiClient
@inject IUserApiClient UserApiClient
@inject IToastService ToastService

@if (ShowDialog && Assignees != null)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <EditForm Model="Model" OnSubmit="HandleAssignSubmit">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Assign task to user</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">

                        <div class="form-group">
                            <label for="recipient-name" class="col-form-label">Recipient:</label>
                            <InputSelect class="form-control" @bind-Value="Model.UserId">
                                <option value="@Guid.Empty">Select an user</option>
                                @foreach (var assignee in Assignees)
                                {
                                <option value="@assignee.Id">@assignee.FullName</option>
                                }
                        </InputSelect>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="()=>Hide()" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Assign</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>
}

@code {
    protected bool ShowDialog { get; set; }

    private Guid TaskId;

    private TaskAssignModel Model { get; set; } = new TaskAssignModel();

    private List<AssigneeDto> Assignees;

    [Parameter]
    public EventCallback<bool> CloseEventCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Assignees = await UserApiClient.GetAssignees();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (TaskId != Guid.Empty)
        {
            var task = await TaskApiClient.GetTaskDetails(TaskId.ToString());
            Model.UserId = task.AssigneeId;
        }
    }

    public void Show(Guid taskId)
    {
        this.TaskId = taskId;
        ShowDialog = true;
        StateHasChanged();
    }

    public void Hide()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    public async Task HandleAssignSubmit()
    {
        var result = await TaskApiClient.AssignTask(TaskId, Model);
        ShowDialog = false;
        await CloseEventCallback.InvokeAsync(result);     
    }
}
