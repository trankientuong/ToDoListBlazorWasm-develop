@page "/taskEdit/{taskId}"
@using ToDoListBlazorWasm.Services
@using TodoList.Models.Dtos
@using TodoList.Models.Enums
@inject NavigationManager NavigationManager
@inject IToastService toastService

@if (TaskUpdateDto == null)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
    <h3>Edit @TaskUpdateDto.Name</h3>
    <EditForm Model="TaskUpdateDto" OnValidSubmit="@SubmitTask">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <InputText hidden @bind-Value="@taskId">@taskId</InputText>
            <Label For="Name">Task Name</Label>
            <InputText id="Name" class="form-control" @bind-Value="@TaskUpdateDto.Name"></InputText>
            <ValidationMessage For="() => TaskUpdateDto.Name"></ValidationMessage>
            <div id="nameHelp" class="form-text">Please enter task title here.</div>
        </div>
        <div class="mb-3">
            <Label For="Assignee">Assignee</Label>
            <InputSelect id="Assignee" class="form-control" @bind-Value="@TaskUpdateDto.AssigneeId">
                <option value="">Select an assignee</option>
                @foreach (var assignee in Assignees)
                {
                <option value="@assignee.Id">@assignee.FullName</option>
                }
        </InputSelect>
        <ValidationMessage For="() => TaskUpdateDto.AssigneeId"></ValidationMessage>
        <div id="assigneeHelp" class="form-text">Please select task assignee here.</div>
    </div>
    <div class="mb-3">
        <Label For="Priority">Priority</Label>
        <InputSelect id="Priority" class="form-control" @bind-Value="@TaskUpdateDto.Priority">
            <option>Select a priority</option>
            @foreach (var item in Enum.GetNames(typeof(Priority)))
                {
                <option value="@item">@item</option>
                }
        </InputSelect>
        <ValidationMessage For="() => TaskUpdateDto.Priority"></ValidationMessage>
        <div id="priorityHelp" class="form-text">Please select task priority here.</div>
    </div>
    <div class="mb-3">
        <Label For="Status">Status</Label>
        <InputSelect id="Status" class="form-control" @bind-Value="@TaskUpdateDto.Status">
            <option>Select a status</option>
            @foreach (var item in Enum.GetNames(typeof(Status)))
                {
                <option value="@item">@item</option>
                }
        </InputSelect>
        <ValidationMessage For="() => TaskUpdateDto.Status"></ValidationMessage>
        <div id="statusHelp" class="form-text">Please select task status here.</div>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>
}

@code {
    [Parameter]
    public string taskId { get; set; }
    private TaskUpdateDto TaskUpdateDto = new TaskUpdateDto();
    private List<AssigneeDto> Assignees = new List<AssigneeDto>();

    [Inject] private IUserApiClient UserApiClient { get; set; }
    [Inject] private ITaskApiClient TaskApiClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var taskDto = await TaskApiClient.GetTaskDetails(taskId);
        TaskUpdateDto.Name = taskDto.Name;
        TaskUpdateDto.AssigneeId = taskDto.AssigneeId;
        TaskUpdateDto.Priority = taskDto.Priority;
        TaskUpdateDto.Status = taskDto.Status;

        Assignees = await UserApiClient.GetAssignees();
    }

    private async Task SubmitTask(EditContext context)
    {
        TaskUpdateDto.Id = Guid.Parse(taskId);
        var result = await TaskApiClient.UpdateTask(TaskUpdateDto);
        if (result)
        {
            toastService.ShowSuccess($"{TaskUpdateDto.Name} has been updated successfully.", "Success");
            NavigationManager.NavigateTo("/taskList");
        }
        else
        {
            toastService.ShowError("An error occured in progress.", "Error");
        }

    }
}
